name: 'Terraform GitHub Actions'
defaults:
  run:
    working-directory: "terraform"

on:
  push:
    branches:
    - main
  pull_request:

jobs:
  install:
    runs-on: [self-hosted, Linux, X64]

    steps:
    - uses: actions/checkout@v1

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_329066851743 }}
        role-duration-seconds: 1200
        aws-region: eu-west-1
      
    - name: Install Terraform
      id: install_terraform
      run: |
        if [ ! `which terraform` ]; then
          sudo yum install -y yum-utils
          sudo yum-config-manager --add-repo https://rpm.releases.hashicorp.com/AmazonLinux/hashicorp.repo
          sudo yum -y install terraform
        fi

    - name: Install jq
      id: install_jq
      run: |
        if [ ! `which jq` ]; then
          sudo yum install jq -y
        fi 
        
  terraform_plan:
    runs-on: [self-hosted, Linux, X64]
    needs: [install]
    steps:
    - uses: actions/checkout@v1

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_329066851743 }}
        role-duration-seconds: 1200
        aws-region: eu-west-1
          
    - name: Verify Terraform version
      id: version
      run: terraform --version

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check -recursive

    - name: Terraform Init
      id: init        
      env:
        ROLE: ${{ secrets.AWS_ROLE_TO_ASSUME_550341143323 }}
      run: |
        temp_role=$(aws sts assume-role --role-arn ${ROLE} --role-session-name AWS_ROLE_TO_ASSUME)
        export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq -r .Credentials.AccessKeyId)
        export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq -r .Credentials.SecretAccessKey)
        export AWS_SESSION_TOKEN=$(echo $temp_role | jq -r .Credentials.SessionToken)
        terraform init

    - name: Terraform Plan
      id: plan
      env:
        ROLE: ${{ secrets.AWS_ROLE_TO_ASSUME_550341143323 }}      
      if: github.event_name == 'pull_request' || github.event_name == 'push'
      continue-on-error: true       
      run: |
        temp_role=$(aws sts assume-role --role-arn ${ROLE} --role-session-name AWS_ROLE_TO_ASSUME)
        export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq -r .Credentials.AccessKeyId)
        export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq -r .Credentials.SecretAccessKey)
        export AWS_SESSION_TOKEN=$(echo $temp_role | jq -r .Credentials.SessionToken)
        terraform plan

    - name: Terraform Plan Status
      id: plan_status
      env:
        ROLE: ${{ secrets.AWS_ROLE_TO_ASSUME_550341143323 }}      
      if: steps.plan.outcome == 'failure'
      run: |
        temp_role=$(aws sts assume-role --role-arn ${ROLE} --role-session-name AWS_ROLE_TO_ASSUME)
        export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq -r .Credentials.AccessKeyId)
        export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq -r .Credentials.SecretAccessKey)
        export AWS_SESSION_TOKEN=$(echo $temp_role | jq -r .Credentials.SessionToken)
        exit 1

  terraform_apply:
    runs-on: [self-hosted, Linux, X64]
    needs: [terraform_plan]
    environment: prod
    steps:
    - uses: actions/checkout@v1

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_329066851743 }}
        role-duration-seconds: 1200
        aws-region: eu-west-1

    - name: Terraform Init
      id: init        
      env:
        ROLE: ${{ secrets.AWS_ROLE_TO_ASSUME_550341143323 }}
      run: |
        temp_role=$(aws sts assume-role --role-arn ${ROLE} --role-session-name AWS_ROLE_TO_ASSUME)
        export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq -r .Credentials.AccessKeyId)
        export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq -r .Credentials.SecretAccessKey)
        export AWS_SESSION_TOKEN=$(echo $temp_role | jq -r .Credentials.SessionToken)
        terraform init
        
    - name: Terraform Apply
      id: apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      env:
        ROLE: ${{ secrets.AWS_ROLE_TO_ASSUME_550341143323 }}
      run: |
        temp_role=$(aws sts assume-role --role-arn ${ROLE} --role-session-name AWS_ROLE_TO_ASSUME)
        export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq -r .Credentials.AccessKeyId)
        export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq -r .Credentials.SecretAccessKey)
        export AWS_SESSION_TOKEN=$(echo $temp_role | jq -r .Credentials.SessionToken)
        terraform apply -auto-approve

